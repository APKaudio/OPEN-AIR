# └── OPEN-AIR 2/
#├── DATA/
#├── agents/
#├── configuration/
#├── datasets/
#├── display/
#├── utils/
#├── workers/
#├── debug.log (Lines: 63478)
#└── main.py (Lines: 158)
#        |   -> Import: datasets.logging
#        |   -> Import: datetime
#        |   -> Import: display.gui_display
#        |   -> Import: inspect
#        |   -> Import: os
#        |   -> Import: pathlib
#        |   -> Import: sys
#        |   -> Function: action_check_configuration()
#        |   -> Function: action_check_dependancies()
#        |   -> Function: action_open_display()
#        |   -> Function: main()
#└── agents/
#    └── yak/
#    └── yak/
#        ├── Yakety_Yak.py (Lines: 568)
#                |   -> Import: csv
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pyvisa
#                |   -> Import: ref.ref_file_paths
#                |   -> Import: time
#                |   -> Import: tkinter
#                |   -> Import: yak.utils_yak_visa
#                |   -> Function: YakBeg(app_instance, command_type, console_print_func)
#                |   -> Function: YakDo(app_instance, command_type, console_print_func)
#                |   -> Function: YakGet(app_instance, command_type, console_print_func)
#                |   -> Function: YakNab(app_instance, command_type, console_print_func)
#                |   -> Function: YakRig(app_instance, command_type, console_print_func)
#                |   -> Function: YakSet(app_instance, command_type, variable_value, console_print_func)
#                |   -> Function: _find_command(command_type, action_type, model)
#                |   -> Function: _load_commands_from_file(file_path)
#                |   -> Function: execute_visa_command(app_instance, action_type, visa_command, variable_value, console_print_func, num_reads)
#        ├── utils_yak_setting_handler.py (Lines: 833)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: threading
#                |   -> Import: time
#                |   -> Import: yak.Yakety_Yak
#                |   -> Function: _process_trace_data(raw_data_string, start_freq_hz, end_freq_hz, console_print_func)
#                |   -> Function: _trigger_gui_refresh(app_instance)
#                |   -> Function: do_immediate_initiate(app_instance, console_print_func)
#                |   -> Function: do_peak_search(app_instance, console_print_func)
#                |   -> Function: do_power_cycle(app_instance, console_print_func)
#                |   -> Function: do_turn_all_markers_on(app_instance, console_print_func)
#                |   -> Function: get_all_marker_values_logic(app_instance, console_print_func)
#                |   -> Function: get_trace_averaging_settings(app_instance, trace_number, console_print_func)
#                |   -> Function: get_trace_data_logic(app_instance, console_print_func)
#                |   -> Function: refresh_all_from_instrument(app_instance, console_print_func)
#                |   -> Function: reset_device(app_instance, console_print_func)
#                |   -> Function: set_center_frequency(app_instance, value, console_print_func)
#                |   -> Function: set_continuous_initiate_mode(app_instance, mode, console_print_func)
#                |   -> Function: set_power_attenuation(tab_instance, app_instance, value, console_print_func)
#                |   -> Function: set_reference_level(tab_instance, app_instance, value, console_print_func)
#                |   -> Function: set_resolution_bandwidth(app_instance, value, console_print_func)
#                |   -> Function: set_span_frequency(app_instance, value, console_print_func)
#                |   -> Function: set_start_frequency(app_instance, value, console_print_func)
#                |   -> Function: set_stop_frequency(app_instance, value, console_print_func)
#                |   -> Function: set_trace_averaging_count(app_instance, trace_number, count, console_print_func)
#                |   -> Function: set_trace_mode(app_instance, trace_number, mode, console_print_func)
#                |   -> Function: set_video_bandwidth(app_instance, value, console_print_func)
#                |   -> Function: toggle_high_sensitivity(tab_instance, app_instance, console_print_func)
#                |   -> Function: toggle_marker_state(app_instance, marker_number, state, console_print_func)
#                |   -> Function: toggle_preamp(tab_instance, app_instance, console_print_func)
#                |   -> Function: toggle_trace_averaging(app_instance, trace_number, is_on, console_print_func)
#                |   -> Function: toggle_vbw_auto(app_instance, console_print_func)
#        ├── utils_yak_visa.py (Lines: 264)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pyvisa
#                |   -> Import: time
#                |   -> Function: _reset_device(inst, console_print_func)
#                |   -> Function: _wait_for_opc(inst, console_print_func, timeout)
#                |   -> Function: query_safe(inst, command, console_print_func)
#                |   -> Function: set_safe(inst, command, value, console_print_func)
#                |   -> Function: write_safe(inst, command, console_print_func)
#        ├── utils_yakbeg_handler.py (Lines: 201)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: typing
#                |   -> Import: yak.Yakety_Yak
#                |   -> Function: handle_freq_center_span_beg(app_instance, center_freq, span_freq, console_print_func)
#                |   -> Function: handle_freq_start_stop_beg(app_instance, start_freq, stop_freq, console_print_func)
#                |   -> Function: handle_marker_place_all_beg(app_instance, marker_freqs_mhz, console_print_func)
#                |   -> Function: handle_trace_data_beg(app_instance, trace_number, start_freq_mhz, stop_freq_mhz, console_print_func)
#                |   -> Function: handle_trace_modes_beg(app_instance, trace_modes, console_print_func)
#        └── utils_yaknab_handler.py (Lines: 215)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: typing
#                |   -> Import: yak.Yakety_Yak
#                |   -> Function: handle_all_traces_nab(app_instance, console_print_func)
#                |   -> Function: handle_amplitude_settings_nab(app_instance, console_print_func)
#                |   -> Function: handle_bandwidth_settings_nab(app_instance, console_print_func)
#└── configuration/
#└── DATA/
#└── datasets/
#    ├── dataset_devices.json (Lines: 4062)
#    ├── dataset_devices_amplifier_type.json (Lines: 40)
#    ├── dataset_devices_antenna_type.json (Lines: 40)
#    ├── dataset_file_paths.json (Lines: 12)
#    ├── dataset_frequency_bands_of_interest.json (Lines: 681)
#    ├── dataset_frequency_government.json (Lines: 191)
#    ├── dataset_frequency_tv_bands.json (Lines: 427)
#    ├── dataset_publisher.py (Lines: 76)
#            |   -> Import: os
#            |   -> Import: sys
#            |   -> Import: workers.mqtt_controller_util
#            |   -> Function: log_treeview_func(message)
#            |   -> Function: main()
#            |   -> Function: print_to_gui_func(message)
#    ├── dataset_scanning_presets.json (Lines: 329)
#    ├── dataset_spectrum_analyzer_setting_lists.json (Lines: 522)
#    ├── datasets_constants.json (Lines: 56)
#    ├── logging.py (Lines: 72)
#            |   -> Import: datetime
#            |   -> Import: inspect
#            |   -> Import: os
#            |   -> Function: console_log(message)
#            |   -> Function: debug_log(message, file, version, function, console_print_func)
#    └── north star - ref_program_default_values.py (Lines: 103)
#            - No functions, classes, or imports found.
#└── display/
#    ├── left_60/
#    ├── prototype/
#    ├── right_40/
#    ├── styling/
#    ├── base_gui_component_rebuilt.py (Lines: 96)
#            |   -> Import: datasets.logging
#            |   -> Import: inspect
#            |   -> Import: json
#            |   -> Import: os
#            |   -> Import: pathlib
#            |   -> Import: styling.style
#            |   -> Import: tkinter
#            |   -> Import: workers.mqtt_controller_util
#            |   -> Class: BaseGUIFrame
#            |   -> Function: __init__(self, parent, mqtt_util, console_print_func)
#            |   -> Function: _apply_styles(self, theme_name)
#            |   -> Function: _get_topic_prefix(self)
#            |   -> Function: _publish_value(self, element_name, value)
#    ├── debug.log (Lines: 0)
#    └── gui_display.py (Lines: 588)
#            |   -> Import: datasets.logging
#            |   -> Import: datetime
#            |   -> Import: display.styling.style
#            |   -> Import: importlib.util
#            |   -> Import: inspect
#            |   -> Import: os
#            |   -> Import: pathlib
#            |   -> Import: sys
#            |   -> Import: tkinter
#            |   -> Import: workers.mqtt_controller_util
#            |   -> Class: Application
#            |   -> Function: __init__(self)
#            |   -> Function: _apply_styles(self, theme_name)
#            |   -> Function: _build_child_container(self, path, parent_widget)
#            |   -> Function: _build_from_directory(self, path, parent_widget)
#            |   -> Function: _on_tab_change(self, event)
#            |   -> Function: _re_attach_tab(self, frame)
#            |   -> Function: _tear_off_tab(self, event)
#    └── left_60/
#        └── top_100/
#        └── top_100/
#            ├── tab_1_instrument/
#            ├── tab_2_markers/
#            ├── tab_3_presets/
#            ├── tab_4_intermod/
#            ├── tab_5_sweeping/
#            ├── tab_6_graphing/
#            └── tab_7_exepriment/
#            └── tab_1_instrument/
#                ├── sub_tab_1_connection/
#                ├── sub_tab_2_settings/
#                └── sub_tab_3_translator/
#                └── sub_tab_1_connection/
#                    └── gui_connection.py (Lines: 300)
#                            |   -> Import: collections
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: threading
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: InstrumentTab
#                            |   -> Class: MockMqttUtil
#                            |   -> Function: __init__(self)
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: _on_message(self, topic, payload)
#                            |   -> Function: _publish_test_message(self, button_id)
#                            |   -> Function: _toggle_connection(self)
#                            |   -> Function: _update_button_style(self, button_id, value)
#                            |   -> Function: _update_connection_status(self, is_connected)
#                            |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                            |   -> Function: publish_message(self, topic, subtopic, value)
#                └── sub_tab_2_settings/
#                    ├── sub_tab_1_frequency/
#                    ├── sub_tab_2_bandwidth/
#                    ├── sub_tab_3_amplitude/
#                    ├── sub_tab_4_markers/
#                    └── sub_tab_5_traces/
#                    └── sub_tab_1_frequency/
#                        └── gui_frequency.py (Lines: 197)
#                                |   -> Import: collections
#                                |   -> Import: datasets.logging
#                                |   -> Import: datetime
#                                |   -> Import: inspect
#                                |   -> Import: json
#                                |   -> Import: os
#                                |   -> Import: pathlib
#                                |   -> Import: styling.style
#                                |   -> Import: threading
#                                |   -> Import: tkinter
#                                |   -> Import: workers.mqtt_controller_util
#                                |   -> Class: FrequencySettingsTab
#                                |   -> Class: MockMqttUtil
#                                |   -> Function: __init__(self, parent_frame, mqtt_util)
#                                |   -> Function: _apply_styles(self, theme_name)
#                                |   -> Function: _create_span_preset_buttons(self, parent_frame)
#                                |   -> Function: _create_widgets(self)
#                                |   -> Function: _get_topic_prefix(self)
#                                |   -> Function: _publish_value(self, element_name, value)
#                                |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                                |   -> Function: publish_message(self, topic, subtopic, value)
#                    └── sub_tab_2_bandwidth/
#                        └── gui_bandwidth.py (Lines: 336)
#                                |   -> Import: collections
#                                |   -> Import: datetime
#                                |   -> Import: display.styling.style
#                                |   -> Import: inspect
#                                |   -> Import: json
#                                |   -> Import: os
#                                |   -> Import: paho.mqtt.client
#                                |   -> Import: re
#                                |   -> Import: threading
#                                |   -> Import: tkinter
#                                |   -> Class: BandwidthSettingsTab
#                                |   -> Class: MockMqttUtil
#                                |   -> Function: __init__(self)
#                                |   -> Function: __init__(self, master, mqtt_util)
#                                |   -> Function: _apply_styles(self, theme_name)
#                                |   -> Function: _create_widgets(self)
#                                |   -> Function: _on_message(self, topic, payload)
#                                |   -> Function: _publish_test_message(self, event, button_id)
#                                |   -> Function: _update_button_style(self, button_id, value)
#                                |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                                |   -> Function: console_log(message)
#                                |   -> Function: debug_log(message, file, version, function, console_print_func)
#                                |   -> Function: publish_message(self, topic, subtopic, value)
#                    └── sub_tab_3_amplitude/
#                        └── gui_amplitude.py (Lines: 390)
#                                |   -> Import: collections
#                                |   -> Import: datasets.logging
#                                |   -> Import: datetime
#                                |   -> Import: display.styling.style
#                                |   -> Import: inspect
#                                |   -> Import: json
#                                |   -> Import: numpy
#                                |   -> Import: os
#                                |   -> Import: paho.mqtt.client
#                                |   -> Import: threading
#                                |   -> Import: tkinter
#                                |   -> Import: workers.mqtt_controller_util
#                                |   -> Class: AmplitudeSettingsTab
#                                |   -> Function: __init__(self, master, mqtt_util)
#                                |   -> Function: _apply_styles(self, theme_name)
#                                |   -> Function: _create_widgets(self)
#                                |   -> Function: _find_closest_preset_value(self, value, preset_list)
#                                |   -> Function: _on_message(self, topic, payload)
#                                |   -> Function: _on_toggle_button_press(self, button_id)
#                                |   -> Function: _publish_test_message(self, button_id)
#                                |   -> Function: _update_button_style(self, button_id, value)
#                                |   -> Function: _update_descriptions(self, value, preset_list, label, var)
#                                |   -> Function: _update_toggle_button_style(self, button, state)
#                    └── sub_tab_4_markers/
#                        └── gui_markers.py (Lines: 188)
#                                |   -> Import: collections
#                                |   -> Import: datasets.logging
#                                |   -> Import: datetime
#                                |   -> Import: display.styling.style
#                                |   -> Import: inspect
#                                |   -> Import: json
#                                |   -> Import: numpy
#                                |   -> Import: os
#                                |   -> Import: paho.mqtt.client
#                                |   -> Import: threading
#                                |   -> Import: tkinter
#                                |   -> Import: workers.mqtt_controller_util
#                                |   -> Class: MarkerSettingsTab
#                                |   -> Function: __init__(self, master, mqtt_util)
#                                |   -> Function: _apply_styles(self, theme_name)
#                                |   -> Function: _create_widgets(self)
#                                |   -> Function: _on_message(self, topic, payload)
#                                |   -> Function: _publish_test_message(self, button_id)
#                                |   -> Function: _update_button_style(self, button_id, value)
#                    └── sub_tab_5_traces/
#                        └── gui_traces.py (Lines: 279)
#                                |   -> Import: collections
#                                |   -> Import: datetime
#                                |   -> Import: display.styling.style
#                                |   -> Import: inspect
#                                |   -> Import: json
#                                |   -> Import: os
#                                |   -> Import: paho.mqtt.client
#                                |   -> Import: pandas
#                                |   -> Import: threading
#                                |   -> Import: tkinter
#                                |   -> Class: MockMqttUtil
#                                |   -> Class: TraceSettingsTab
#                                |   -> Function: __init__(self)
#                                |   -> Function: __init__(self, master, mqtt_util)
#                                |   -> Function: _apply_styles(self, theme_name)
#                                |   -> Function: _create_widgets(self)
#                                |   -> Function: _on_message(self, topic, payload)
#                                |   -> Function: _publish_test_message(self, button_id)
#                                |   -> Function: _update_button_style(self, button_id, value)
#                                |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                                |   -> Function: console_log(message)
#                                |   -> Function: debug_log(message, file, version, function, console_print_func)
#                                |   -> Function: publish_message(self, topic, subtopic, value)
#                └── sub_tab_3_translator/
#                    └── gui_translator.py (Lines: 186)
#                            |   -> Import: collections
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: styling.style
#                            |   -> Import: threading
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: MockMqttUtil
#                            |   -> Class: VisaInterpreterTab
#                            |   -> Function: __init__(self, parent_frame, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: _get_topic_prefix(self)
#                            |   -> Function: _load_data_to_treeview(self)
#                            |   -> Function: _publish_value(self, element_name, value)
#                            |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                            |   -> Function: publish_message(self, topic, subtopic, value)
#            └── tab_2_markers/
#                ├── sub_tab_1_showtime/
#                └── sub_tab_2_editor/
#                └── sub_tab_1_showtime/
#                    └── gui_child_1_showtime.py (Lines: 190)
#                            |   -> Import: collections
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: styling.style
#                            |   -> Import: threading
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: MockMqttUtil
#                            |   -> Class: ZoneGroupsDevicesFrame
#                            |   -> Function: __init__(self)
#                            |   -> Function: __init__(self, parent_frame, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: _get_topic_prefix(self)
#                            |   -> Function: _make_device_buttons(self, zone_name, group_name)
#                            |   -> Function: _make_group_buttons(self, zone_name)
#                            |   -> Function: _make_zone_buttons(self)
#                            |   -> Function: _publish_value(self, element_name, value)
#                            |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                            |   -> Function: publish_message(self, topic, subtopic, value)
#                └── sub_tab_2_editor/
#                    └── gui_child_2_editor.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#            └── tab_3_presets/
#                ├── sub_tab_1_pusher/
#                ├── sub_tab_2_editor/
#                └── sub_tab_3_collector/
#                └── sub_tab_1_pusher/
#                    └── gui_child_1_pusher.py (Lines: 71)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.base_gui_component_rebuilt
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: LocalPresetsTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _create_widgets(self)
#                └── sub_tab_2_editor/
#                    └── gui_child_2_editor.py (Lines: 90)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.base_gui_component_rebuilt
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: PresetEditorTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: on_double_click(event)
#                └── sub_tab_3_collector/
#                    └── gui_child_3_collector.py (Lines: 233)
#                            |   -> Import: collections
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: threading
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: DevicePresetsTab
#                            |   -> Class: MockMqttUtil
#                            |   -> Function: __init__(self)
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_message(self, topic, payload)
#                            |   -> Function: _publish_test_message(self, event, button_id)
#                            |   -> Function: add_subscriber(self, topic_filter, callback_func)
#                            |   -> Function: create_widgets(self)
#                            |   -> Function: publish_message(self, topic, subtopic, value)
#                            |   -> Function: setup_layout(self)
#            └── tab_4_intermod/
#                ├── sub_tab_1_calculator/
#                └── sub_tab_2_future/
#                └── sub_tab_1_calculator/
#                    └── gui_child_1_calculator.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                └── sub_tab_2_future/
#                    ├── gui_1_top.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                    ├── gui_2_bottom copy.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                    └── gui_44_last.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#            └── tab_5_sweeping/
#                ├── sub_tab_0_bands/
#                ├── sub_tab_0_configuration/
#                ├── sub_tab_1_single/
#                ├── sub_tab_2_meta_data/
#                ├── sub_tab_2_statistical/
#                ├── sub_tab_3_averaging/
#                └── gui_child_1_single.py (Lines: 84)
#                        |   -> Import: datasets.logging
#                        |   -> Import: display.styling.style
#                        |   -> Import: os
#                        |   -> Import: pathlib
#                        |   -> Import: tkinter
#                        |   -> Import: workers.mqtt_controller_util
#                        |   -> Class: Plotting3DTab
#                        |   -> Function: __init__(self, master, mqtt_util)
#                        |   -> Function: _apply_styles(self, theme_name)
#                        |   -> Function: _create_widgets(self)
#                        |   -> Function: _get_topic_prefix(self)
#                        |   -> Function: _publish_value(self, element_name, value)
#                └── sub_tab_0_bands/
#                    └── gui_bands.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                └── sub_tab_0_configuration/
#                    └── gui_configureation.py (Lines: 97)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.base_gui_component_rebuilt
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: ScanTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _create_setting_row(self, parent, row, key, label_text, data_list, mqtt_topic_suffix)
#                            |   -> Function: _create_widgets(self)
#                └── sub_tab_1_single/
#                    └── gui_child_1_single.py (Lines: 97)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.styling.style
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: PlottingTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: _get_topic_prefix(self)
#                            |   -> Function: _publish_value(self, element_name, value)
#                └── sub_tab_2_meta_data/
#                    └── gui_metadata.py (Lines: 73)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.base_gui_component_rebuilt
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BandsTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _create_widgets(self)
#                └── sub_tab_2_statistical/
#                    └── gui_child_2_statistical.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                └── sub_tab_3_averaging/
#                    └── gui_averaging.py (Lines: 128)
#                            |   -> Import: datasets.logging
#                            |   -> Import: display.styling.style
#                            |   -> Import: os
#                            |   -> Import: pathlib
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: AveragingTab
#                            |   -> Function: __init__(self, master, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _create_widgets(self)
#                            |   -> Function: _get_topic_prefix(self)
#                            |   -> Function: _publish_value(self, element_name, value)
#            └── tab_6_graphing/
#                ├── sub_tab_1_from_file/
#                └── sub_tab_2_3d/
#                └── sub_tab_1_from_file/
#                    └── gui_child1_from_file.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#                └── sub_tab_2_3d/
#                    └── gui_3d.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#            └── tab_7_exepriment/
#                └── sub_tab_1_mosquitto/
#                └── sub_tab_1_mosquitto/
#                    └── gui_7_experiment.py (Lines: 361)
#                            |   -> Import: datasets.logging
#                            |   -> Import: datetime
#                            |   -> Import: display.styling.style
#                            |   -> Import: inspect
#                            |   -> Import: json
#                            |   -> Import: os
#                            |   -> Import: paho.mqtt.client
#                            |   -> Import: pathlib
#                            |   -> Import: sys
#                            |   -> Import: tkinter
#                            |   -> Import: workers.mqtt_controller_util
#                            |   -> Class: BaseGUIFrame
#                            |   -> Function: __init__(self, parent, mqtt_util)
#                            |   -> Function: _apply_styles(self, theme_name)
#                            |   -> Function: _on_mqtt_message(self, topic, payload)
#                            |   -> Function: _publish_custom_message(self)
#                            |   -> Function: _publish_version_message(self)
#                            |   -> Function: debug_button_press(self)
#                            |   -> Function: log_button_press(self)
#    └── prototype/
#        └── gui_translator.py (Lines: 361)
#                |   -> Import: datasets.logging
#                |   -> Import: datetime
#                |   -> Import: display.styling.style
#                |   -> Import: inspect
#                |   -> Import: json
#                |   -> Import: os
#                |   -> Import: paho.mqtt.client
#                |   -> Import: pathlib
#                |   -> Import: sys
#                |   -> Import: tkinter
#                |   -> Import: workers.mqtt_controller_util
#                |   -> Class: BaseGUIFrame
#                |   -> Function: __init__(self, parent, mqtt_util)
#                |   -> Function: _apply_styles(self, theme_name)
#                |   -> Function: _on_mqtt_message(self, topic, payload)
#                |   -> Function: _publish_custom_message(self)
#                |   -> Function: _publish_version_message(self)
#                |   -> Function: debug_button_press(self)
#                |   -> Function: log_button_press(self)
#    └── right_40/
#        ├── bottom_90/
#        └── top_10/
#        └── bottom_90/
#            ├── tab_1_scan/
#            ├── tab_2_monitors/
#            ├── tab_3_debug/
#            ├── tab_4_conductor/
#            └── tab_5_configuration/
#            └── tab_1_scan/
#                ├── display_child_scan_view.py (Lines: 102)
#                        |   -> Import: display.console_logic
#                        |   -> Import: display.debug_logic
#                        |   -> Import: display.utils_scan_view
#                        |   -> Import: inspect
#                        |   -> Import: matplotlib.backends.backend_tkagg
#                        |   -> Import: matplotlib.figure
#                        |   -> Import: numpy
#                        |   -> Import: os
#                        |   -> Import: pandas
#                        |   -> Import: tkinter
#                        |   -> Class: ScanViewTab
#                        |   -> Function: __init__(self, master, app_instance)
#                        |   -> Function: _create_widgets(self)
#                └── gui_tab_1_scan.py (Lines: 361)
#                        |   -> Import: datasets.logging
#                        |   -> Import: datetime
#                        |   -> Import: display.styling.style
#                        |   -> Import: inspect
#                        |   -> Import: json
#                        |   -> Import: os
#                        |   -> Import: paho.mqtt.client
#                        |   -> Import: pathlib
#                        |   -> Import: sys
#                        |   -> Import: tkinter
#                        |   -> Import: workers.mqtt_controller_util
#                        |   -> Class: BaseGUIFrame
#                        |   -> Function: __init__(self, parent, mqtt_util)
#                        |   -> Function: _apply_styles(self, theme_name)
#                        |   -> Function: _on_mqtt_message(self, topic, payload)
#                        |   -> Function: _publish_custom_message(self)
#                        |   -> Function: _publish_version_message(self)
#                        |   -> Function: debug_button_press(self)
#                        |   -> Function: log_button_press(self)
#            └── tab_2_monitors/
#                ├── display_child_scan_monitor.py (Lines: 153)
#                        |   -> Import: display.console_logic
#                        |   -> Import: display.debug_logic
#                        |   -> Import: inspect
#                        |   -> Import: matplotlib.backends.backend_tkagg
#                        |   -> Import: matplotlib.figure
#                        |   -> Import: numpy
#                        |   -> Import: os
#                        |   -> Import: tkinter
#                        |   -> Class: ScanMonitorTab
#                        |   -> Function: __init__(self, master, app_instance)
#                        |   -> Function: _create_widgets(self)
#                └── gui_tab_2_monitors.py (Lines: 361)
#                        |   -> Import: datasets.logging
#                        |   -> Import: datetime
#                        |   -> Import: display.styling.style
#                        |   -> Import: inspect
#                        |   -> Import: json
#                        |   -> Import: os
#                        |   -> Import: paho.mqtt.client
#                        |   -> Import: pathlib
#                        |   -> Import: sys
#                        |   -> Import: tkinter
#                        |   -> Import: workers.mqtt_controller_util
#                        |   -> Class: BaseGUIFrame
#                        |   -> Function: __init__(self, parent, mqtt_util)
#                        |   -> Function: _apply_styles(self, theme_name)
#                        |   -> Function: _on_mqtt_message(self, topic, payload)
#                        |   -> Function: _publish_custom_message(self)
#                        |   -> Function: _publish_version_message(self)
#                        |   -> Function: debug_button_press(self)
#                        |   -> Function: log_button_press(self)
#            └── tab_3_debug/
#                ├── display_child_application_console.py (Lines: 181)
#                        |   -> Import: display.console_logic
#                        |   -> Import: display.debug_logic
#                        |   -> Import: inspect
#                        |   -> Import: os
#                        |   -> Import: src.gui_elements
#                        |   -> Import: tkinter
#                        |   -> Class: ConsoleTab
#                        |   -> Function: __init__(self, master, app_instance)
#                        |   -> Function: _clear_applications_console_action(self)
#                        |   -> Function: _create_widgets(self)
#                        |   -> Function: _on_tab_selected(self, event)
#                ├── display_child_debug.py (Lines: 376)
#                        |   -> Import: display.console_logic
#                        |   -> Import: display.debug_logic
#                        |   -> Import: inspect
#                        |   -> Import: os
#                        |   -> Import: settings_and_config.config_manager_save
#                        |   -> Import: subprocess
#                        |   -> Import: sys
#                        |   -> Import: threading
#                        |   -> Import: time
#                        |   -> Import: tkinter
#                        |   -> Class: DebugTab
#                        |   -> Function: __init__(self, master, app_instance)
#                        |   -> Function: _check_log_files(self)
#                        |   -> Function: _clear_debug_log_file_action(self)
#                        |   -> Function: _create_widgets(self)
#                        |   -> Function: _filter_and_display_log(self, event)
#                        |   -> Function: _on_tab_selected(self, event)
#                        |   -> Function: _open_data_folder_action(self)
#                        |   -> Function: _read_new_log_content(self, file_path, start_pos)
#                        |   -> Function: _toggle_debug_mode(self)
#                        |   -> Function: _toggle_debug_to_file_mode(self)
#                        |   -> Function: _toggle_include_console_messages_to_debug_file_mode(self)
#                        |   -> Function: _toggle_include_visa_messages_to_debug_file_mode(self)
#                        |   -> Function: _toggle_log_truncation_mode(self)
#                        |   -> Function: _toggle_visa_logging_mode(self)
#                └── gui_tab_3_debug.py (Lines: 361)
#                        |   -> Import: datasets.logging
#                        |   -> Import: datetime
#                        |   -> Import: display.styling.style
#                        |   -> Import: inspect
#                        |   -> Import: json
#                        |   -> Import: os
#                        |   -> Import: paho.mqtt.client
#                        |   -> Import: pathlib
#                        |   -> Import: sys
#                        |   -> Import: tkinter
#                        |   -> Import: workers.mqtt_controller_util
#                        |   -> Class: BaseGUIFrame
#                        |   -> Function: __init__(self, parent, mqtt_util)
#                        |   -> Function: _apply_styles(self, theme_name)
#                        |   -> Function: _on_mqtt_message(self, topic, payload)
#                        |   -> Function: _publish_custom_message(self)
#                        |   -> Function: _publish_version_message(self)
#                        |   -> Function: debug_button_press(self)
#                        |   -> Function: log_button_press(self)
#            └── tab_4_conductor/
#                └── gui_mqtt_conductor.py (Lines: 374)
#                        |   -> Import: collections
#                        |   -> Import: datasets.logging
#                        |   -> Import: datetime
#                        |   -> Import: display.styling.style
#                        |   -> Import: inspect
#                        |   -> Import: itertools
#                        |   -> Import: json
#                        |   -> Import: os
#                        |   -> Import: paho.mqtt.client
#                        |   -> Import: subprocess
#                        |   -> Import: threading
#                        |   -> Import: tkinter
#                        |   -> Import: workers.mqtt_controller_util
#                        |   -> Class: MqttConductorFrame
#                        |   -> Function: __init__(self, parent, mqtt_util)
#                        |   -> Function: _apply_styles(self, theme_name)
#                        |   -> Function: _clear_log(self)
#                        |   -> Function: _create_widgets(self)
#                        |   -> Function: _on_message(self, topic, payload)
#                        |   -> Function: _on_sys_message(self, topic, payload)
#                        |   -> Function: _publish_custom_message(self)
#                        |   -> Function: log_to_gui(self, message)
#                        |   -> Function: log_to_table(self, topic, message)
#            └── tab_5_configuration/
#                └── gui_tab_5_configuration.py (Lines: 176)
#                        |   -> Import: datetime
#                        |   -> Import: inspect
#                        |   -> Import: os
#                        |   -> Import: tkinter
#                        |   -> Class: InitialConfigurationTab
#                        |   -> Function: __init__(self, master)
#                        |   -> Function: _create_widgets(self)
#                        |   -> Function: _populate_config_table(self)
#                        |   -> Function: _reload_config_action(self)
#                        |   -> Function: _save_program_configure_action(self)
#                        |   -> Function: console_log(message)
#                        |   -> Function: debug_log(message, file, version, function)
#        └── top_10/
#            └── gui_start_stop.py (Lines: 361)
#                    |   -> Import: datasets.logging
#                    |   -> Import: datetime
#                    |   -> Import: display.styling.style
#                    |   -> Import: inspect
#                    |   -> Import: json
#                    |   -> Import: os
#                    |   -> Import: paho.mqtt.client
#                    |   -> Import: pathlib
#                    |   -> Import: sys
#                    |   -> Import: tkinter
#                    |   -> Import: workers.mqtt_controller_util
#                    |   -> Class: BaseGUIFrame
#                    |   -> Function: __init__(self, parent, mqtt_util)
#                    |   -> Function: _apply_styles(self, theme_name)
#                    |   -> Function: _on_mqtt_message(self, topic, payload)
#                    |   -> Function: _publish_custom_message(self)
#                    |   -> Function: _publish_version_message(self)
#                    |   -> Function: debug_button_press(self)
#                    |   -> Function: log_button_press(self)
#    └── styling/
#        └── style.py (Lines: 112)
#                |   -> Import: os
#└── utils/
#└── workers/
#    ├── Experiments/
#    ├── Instrument/
#    ├── Marker_files/
#    ├── Plotting/
#    ├── Presets/
#    ├── Scanning/
#    ├── controls/
#    ├── orchestrator/
#    ├── zones_groups_devices/
#    ├── connection_status_logic.py (Lines: 78)
#            |   -> Import: display.console_logic
#            |   -> Import: display.debug_logic
#            |   -> Import: inspect
#            |   -> Import: os
#            |   -> Import: tkinter
#            |   -> Function: update_connection_status_logic(app_instance, is_connected, is_running, console_print_func)
#    ├── mqtt_controller_util.py (Lines: 336)
#            |   -> Import: datasets.logging
#            |   -> Import: datetime
#            |   -> Import: inspect
#            |   -> Import: json
#            |   -> Import: os
#            |   -> Import: paho.mqtt.client
#            |   -> Import: pathlib
#            |   -> Import: subprocess
#            |   -> Import: sys
#            |   -> Import: threading
#            |   -> Class: MqttControllerUtility
#            |   -> Function: __init__(self, print_to_gui_func, log_treeview_func)
#            |   -> Function: add_subscriber(self, topic_filter, callback_func)
#            |   -> Function: check_status(self)
#            |   -> Function: connect_mqtt(self)
#            |   -> Function: on_connect(self, client, userdata, flags, rc)
#            |   -> Function: on_message(self, client, userdata, msg)
#            |   -> Function: publish_message(self, topic, subtopic, value)
#            |   -> Function: show_topics(self)
#            |   -> Function: start_mosquitto(self)
#            |   -> Function: stop_mosquitto(self)
#    ├── utils_csv_writer.py (Lines: 125)
#            |   -> Import: csv
#            |   -> Import: display.console_logic
#            |   -> Import: display.debug_logic
#            |   -> Import: inspect
#            |   -> Import: os
#            |   -> Function: write_scan_data_to_csv(file_path, header, data, app_instance_ref, append_mode, console_print_func)
#    ├── utils_display_monitor.py (Lines: 325)
#            |   -> Import: display.console_logic
#            |   -> Import: display.debug_logic
#            |   -> Import: inspect
#            |   -> Import: matplotlib.offsetbox
#            |   -> Import: numpy
#            |   -> Import: os
#            |   -> Import: traceback
#            |   -> Function: _find_and_plot_peaks(ax, data, start_freq_mhz, end_freq_mhz)
#            |   -> Function: _setup_zoom_events(ax, canvas, original_xlim)
#            |   -> Function: clear_monitor_plots(scan_monitor_tab_instance)
#            |   -> Function: on_double_click(event)
#            |   -> Function: on_press(event)
#            |   -> Function: on_release(event)
#            |   -> Function: reset_zoom(ax, canvas)
#            |   -> Function: update_annot(event)
#            |   -> Function: update_annot(event)
#            |   -> Function: update_annot(event)
#            |   -> Function: update_bottom_plot(scan_monitor_tab_instance, data, start_freq_mhz, end_freq_mhz, plot_title)
#            |   -> Function: update_middle_plot(scan_monitor_tab_instance, data, start_freq_mhz, end_freq_mhz, plot_title)
#            |   -> Function: update_top_plot(scan_monitor_tab_instance, data, start_freq_mhz, end_freq_mhz, plot_title)
#    └── utils_scan_view.py (Lines: 182)
#            |   -> Import: display.console_logic
#            |   -> Import: display.debug_logic
#            |   -> Import: inspect
#            |   -> Import: matplotlib.offsetbox
#            |   -> Import: numpy
#            |   -> Import: os
#            |   -> Import: traceback
#            |   -> Function: _find_and_plot_peaks(ax, data, start_freq_mhz, end_freq_mhz)
#            |   -> Function: _setup_zoom_events(ax, canvas, original_xlim)
#            |   -> Function: on_double_click(event)
#            |   -> Function: on_press(event)
#            |   -> Function: on_release(event)
#            |   -> Function: reset_zoom(ax, canvas)
#            |   -> Function: update_annot(event)
#            |   -> Function: update_single_plot(scan_view_tab_instance, data, start_freq_mhz, end_freq_mhz, plot_title, line_color)
#    └── controls/
#        ├── tab_markers_child_control_poke.py (Lines: 72)
#                |   -> Import: datetime
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_poke
#                |   -> Class: PokeTab
#                |   -> Function: __init__(self, parent_notebook, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#        ├── tab_markers_child_control_rbw.py (Lines: 85)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: ref.ref_scanner_setting_lists
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_rbw
#                |   -> Class: RBWTab
#                |   -> Function: __init__(self, parent_notebook, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#        ├── tab_markers_child_control_span.py (Lines: 85)
#                |   -> Import: datetime
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: ref.ref_scanner_setting_lists
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_span
#                |   -> Class: SpanTab
#                |   -> Function: __init__(self, parent_notebook, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#        ├── tab_markers_child_control_traces.py (Lines: 143)
#                |   -> Import: datetime
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_trace
#                |   -> Class: TracesTab
#                |   -> Function: __init__(self, parent_notebook, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _toggle_and_execute(self, button_type)
#                |   -> Function: _update_button_styles(self)
#        ├── tab_markers_child_control_zone_zoom.py (Lines: 188)
#                |   -> Import: datetime
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_zone_zoom
#                |   -> Class: ZoneZoomTab
#                |   -> Function: __init__(self, parent_notebook, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _sync_ui_from_state(self)
#        ├── tab_markers_parent_bottom_controls.py (Lines: 214)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: src.program_style
#                |   -> Import: tab_markers_child_control_poke
#                |   -> Import: tab_markers_child_control_rbw
#                |   -> Import: tab_markers_child_control_span
#                |   -> Import: tab_markers_child_control_traces
#                |   -> Import: tab_markers_child_control_zone_zoom
#                |   -> Import: tkinter
#                |   -> Class: ControlsFrame
#                |   -> Function: __init__(self, parent_frame, showtime_tab_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _update_control_buttons(self)
#                |   -> Function: switch_to_tab(self, tab_name)
#        ├── utils_showtime_plot.py (Lines: 76)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: display.utils_display_monitor
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: tkinter
#                |   -> Function: plot_all_traces(showtime_tab_instance, trace_data_dict, view_name, start_freq_mhz, stop_freq_mhz)
#        ├── utils_showtime_poke.py (Lines: 86)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: utils_showtime_span
#                |   -> Import: yak.Yakety_Yak
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Function: on_poke_action(showtime_tab_instance)
#        ├── utils_showtime_rbw.py (Lines: 91)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: process_math.math_frequency_translation
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: tkinter
#                |   -> Import: yak.Yakety_Yak
#                |   -> Import: yak.utils_yak_setting_handler
#                |   -> Function: on_rbw_button_click(showtime_tab, rbw_hz)
#                |   -> Function: set_rbw_logic(app_instance, rbw_hz, console_print_func)
#        ├── utils_showtime_span.py (Lines: 93)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: process_math.math_frequency_translation
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: yak.utils_yak_setting_handler
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Import: yak.utils_yaknab_handler
#                |   -> Function: on_span_button_click(showtime_tab_instance, span_hz)
#        ├── utils_showtime_trace.py (Lines: 138)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: process_math.math_frequency_translation
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: tkinter
#                |   -> Import: utils_showtime_plot
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Import: yak.utils_yaknab_handler
#                |   -> Function: _get_and_plot_traces(traces_tab_instance, view_name)
#                |   -> Function: execute_trace_action(traces_tab_instance, action_type)
#                |   -> Function: sync_trace_modes(traces_tab_instance)
#        └── utils_showtime_zone_zoom.py (Lines: 312)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: process_math.math_frequency_translation
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Function: _buffer_start_stop_frequencies(start_freq_mhz, stop_freq_mhz, buffer_mhz)
#                |   -> Function: set_span_to_all_markers(showtime_tab_instance, zone_zoom_tab)
#                |   -> Function: set_span_to_device(showtime_tab_instance, zone_zoom_tab)
#                |   -> Function: set_span_to_group(showtime_tab_instance, zone_zoom_tab)
#                |   -> Function: set_span_to_zone(showtime_tab_instance, zone_zoom_tab)
#    └── Experiments/
#        ├── __init__.py (Lines: 24)
#        ├── tab_experiments_child_JSON_api.py (Lines: 489)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: requests
#                |   -> Import: subprocess
#                |   -> Import: sys
#                |   -> Import: threading
#                |   -> Import: time
#                |   -> Import: tkinter
#                |   -> Import: webbrowser
#                |   -> Class: JsonApiTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_all_api_scans(self)
#                |   -> Function: _open_api_scan_data(self, filename)
#                |   -> Function: _open_latest_api_scan(self)
#                |   -> Function: _open_markers_api(self)
#                |   -> Function: _open_scan_in_progress_api(self)
#                |   -> Function: _run_json_api_thread_target(self)
#                |   -> Function: _start_json_api(self)
#                |   -> Function: _stop_json_api(self)
#                |   -> Function: _update_api_button_states(self)
#                |   -> Function: fetch_and_display()
#        ├── tab_experiments_child_credits.py (Lines: 152)
#                |   -> Import: PIL
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Import: webbrowser
#                |   -> Class: CreditsTab
#                |   -> Function: __init__(self, parent_notebook, app_instance, console_print_func)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_github_link(self)
#        ├── tab_experiments_child_initial_configuration.py (Lines: 195)
#                |   -> Import: configparser
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: ref.ref_file_paths
#                |   -> Import: ref.ref_program_default_values
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: tkinter
#                |   -> Class: InitialConfigurationTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func, style_obj)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _populate_config_table(self)
#                |   -> Function: _reload_config_action(self)
#                |   -> Function: _save_program_configure_action(self)
#        ├── tab_experiments_child_intermod.py (Lines: 680)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: process_math.calculate_intermod
#                |   -> Import: process_math.ploting_intermod_zones
#                |   -> Import: random
#                |   -> Import: subprocess
#                |   -> Import: sys
#                |   -> Import: tkinter
#                |   -> Import: tkinter.font
#                |   -> Import: typing
#                |   -> Class: InterModTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _browse_markers_file(self)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _display_imd_results(self, df)
#                |   -> Function: _load_intermod_csv(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _on_treeview_header_click(self, event)
#                |   -> Function: _open_intermod_csv(self)
#                |   -> Function: _open_intermod_map(self)
#                |   -> Function: _parse_markers_csv(self, csv_path)
#                |   -> Function: _plot_imd_results(self)
#                |   -> Function: _process_imd(self)
#                |   -> Function: _sort_treeview(self, col_name, order)
#        ├── tab_experiments_child_yak_beg.py (Lines: 344)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Class: YakBegTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_freq_center_span_beg(self)
#                |   -> Function: _on_freq_start_stop_beg(self)
#                |   -> Function: _on_marker_place_all_beg(self)
#                |   -> Function: _on_push_to_monitor(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _on_trace_data_beg(self)
#                |   -> Function: _on_trace_modes_beg(self)
#        └── tab_experiments_colouring.py (Lines: 306)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: re
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Class: ColouringTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _add_color_display_row(self, parent_frame, text, hex_color, row_idx, indent)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_mousewheel(self, event)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _populate_content(self)
#    └── Instrument/
#        ├── connection/
#        ├── settings/
#        ├── visa/
#        ├── TAB_INSTRUMENT_PARENT.py (Lines: 49)
#                |   -> Import: connection.tab_instrument_child_connection
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: settings.tab_instrument_child_settings
#                |   -> Import: tkinter
#                |   -> Import: visa.tab_instrument_child_visa_interpreter
#                |   -> Class: TAB_INSTRUMENT_PARENT
#                |   -> Function: __init__(self, parent, app_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_child_tab_selected(self, event)
#                |   -> Function: _on_parent_tab_selected(self, event)
#        └── __init__.py (Lines: 0)
#        └── connection/
#            ├── instrument_logic.py (Lines: 232)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: pyvisa
#                    |   -> Import: sys
#                    |   -> Import: time
#                    |   -> Import: tkinter
#                    |   -> Import: traceback
#                    |   -> Import: utils_instrument_connection
#                    |   -> Import: yak.Yakety_Yak
#                    |   -> Function: connect_instrument_logic(app_instance, console_print_func)
#                    |   -> Function: disconnect_instrument_logic(app_instance, console_print_func)
#                    |   -> Function: populate_resources_logic(app_instance, combobox_widget, console_print_func)
#                    |   -> Function: query_current_settings_logic(app_instance, console_print_func)
#            ├── tab_instrument_child_connection.py (Lines: 223)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: instrument_logic
#                    |   -> Import: os
#                    |   -> Import: threading
#                    |   -> Import: time
#                    |   -> Import: tkinter
#                    |   -> Import: yak.utils_yak_setting_handler
#                    |   -> Class: InstrumentTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func, parent_notebook_ref)
#                    |   -> Function: _connect_instrument(self)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _disconnect_instrument(self)
#                    |   -> Function: _on_tab_selected(self, event)
#                    |   -> Function: _populate_resources(self)
#                    |   -> Function: _power_cycle_instrument(self)
#                    |   -> Function: _reset_instrument(self)
#                    |   -> Function: _toggle_connection(self)
#                    |   -> Function: _update_connection_status(self)
#            └── utils_instrument_connection.py (Lines: 194)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: pyvisa
#                    |   -> Function: connect_to_instrument(resource_name, console_print_func)
#                    |   -> Function: disconnect_instrument(inst, console_print_func)
#                    |   -> Function: list_visa_resources(console_print_func)
#        └── settings/
#            ├── tab_instrument_child_settings.py (Lines: 120)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: src.program_style
#                    |   -> Import: tab_instrument_child_settings_amplitude
#                    |   -> Import: tab_instrument_child_settings_bandwidth
#                    |   -> Import: tab_instrument_child_settings_frequency
#                    |   -> Import: tab_instrument_child_settings_markers
#                    |   -> Import: tab_instrument_child_settings_traces
#                    |   -> Import: tkinter
#                    |   -> Class: SettingsParentTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func)
#                    |   -> Function: _on_tab_selected(self, event)
#                    |   -> Function: refresh_all_child_tabs(self)
#            ├── tab_instrument_child_settings_amplitude.py (Lines: 348)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: ref.ref_scanner_setting_lists
#                    |   -> Import: settings_and_config.config_manager_instruments
#                    |   -> Import: settings_and_config.config_manager_save
#                    |   -> Import: tkinter
#                    |   -> Import: yak
#                    |   -> Import: yak.Yakety_Yak
#                    |   -> Class: AmplitudeSettingsTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _find_closest_preset_value(self, value, preset_list)
#                    |   -> Function: _on_power_attenuation_change(self, event)
#                    |   -> Function: _on_ref_level_change(self, event)
#                    |   -> Function: _on_resize(self, event)
#                    |   -> Function: _save_settings_handler(self)
#                    |   -> Function: _set_ui_initial_state(self)
#                    |   -> Function: _update_descriptions(self, value, preset_list, label, var)
#                    |   -> Function: _update_power_attenuation_display(self, value)
#                    |   -> Function: _update_ref_level_display(self, value)
#                    |   -> Function: _update_toggle_button_style(self, button, state)
#            ├── tab_instrument_child_settings_bandwidth.py (Lines: 509)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: re
#                    |   -> Import: ref.ref_scanner_setting_lists
#                    |   -> Import: settings_and_config.config_manager_instruments
#                    |   -> Import: settings_and_config.config_manager_save
#                    |   -> Import: tkinter
#                    |   -> Import: yak
#                    |   -> Import: yak.utils_yaknab_handler
#                    |   -> Class: BandwidthSettingsTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _on_averaging_count_selected(self, event, trace_number)
#                    |   -> Function: _on_averaging_toggle(self, trace_number, state)
#                    |   -> Function: _on_continuous_mode_change(self, event)
#                    |   -> Function: _on_rbw_selected(self, event)
#                    |   -> Function: _on_tab_selected(self, event)
#                    |   -> Function: _on_vbw_auto_toggle(self)
#                    |   -> Function: _on_vbw_selected(self, event)
#                    |   -> Function: _save_settings_handler(self)
#                    |   -> Function: _sync_ui_from_app_state(self)
#                    |   -> Function: _update_rbw_combobox_display(self)
#                    |   -> Function: _update_toggle_button_style(self, button, state)
#                    |   -> Function: _update_vbw_combobox_display(self)
#            ├── tab_instrument_child_settings_frequency.py (Lines: 498)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: numpy
#                    |   -> Import: os
#                    |   -> Import: ref.ref_file_paths
#                    |   -> Import: ref.ref_program_default_values
#                    |   -> Import: ref.ref_scanner_setting_lists
#                    |   -> Import: settings_and_config.config_manager_instruments
#                    |   -> Import: settings_and_config.config_manager_save
#                    |   -> Import: tkinter
#                    |   -> Import: yak.utils_yakbeg_handler
#                    |   -> Class: FrequencySettingsTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func, style_obj)
#                    |   -> Function: _create_span_preset_buttons(self, parent_frame)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _on_freq_center_span_beg(self)
#                    |   -> Function: _on_freq_start_stop_beg(self)
#                    |   -> Function: _on_span_preset_button_click(self, preset)
#                    |   -> Function: _on_span_variable_change(self)
#                    |   -> Function: _round_variables(self)
#                    |   -> Function: _save_settings_handler(self)
#                    |   -> Function: _set_default_variables(self)
#                    |   -> Function: _update_span_button_styles(self)
#                    |   -> Function: truncate_float(f)
#            ├── tab_instrument_child_settings_markers.py (Lines: 206)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: settings_and_config.config_manager_marker
#                    |   -> Import: settings_and_config.config_manager_save
#                    |   -> Import: tkinter
#                    |   -> Import: yak.utils_yakbeg_handler
#                    |   -> Class: MarkerSettingsTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _on_marker_place_all_beg(self)
#                    |   -> Function: _save_settings_handler(self)
#                    |   -> Function: _set_default_variables(self)
#            └── tab_instrument_child_settings_traces.py (Lines: 489)
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: display.utils_display_monitor
#                    |   -> Import: display.utils_scan_view
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: pandas
#                    |   -> Import: settings_and_config.config_manager_instruments
#                    |   -> Import: settings_and_config.config_manager_save
#                    |   -> Import: tkinter
#                    |   -> Import: yak.utils_yakbeg_handler
#                    |   -> Import: yak.utils_yaknab_handler
#                    |   -> Class: TraceSettingsTab
#                    |   -> Function: __init__(self, master, app_instance, console_print_func)
#                    |   -> Function: _create_widgets(self)
#                    |   -> Function: _on_all_traces_nab(self)
#                    |   -> Function: _on_push_to_monitor(self)
#                    |   -> Function: _on_tab_selected(self, event)
#                    |   -> Function: _on_trace_data_beg(self)
#                    |   -> Function: _on_trace_modes_beg(self)
#                    |   -> Function: _plot_all_traces_to_monitor(self)
#                    |   -> Function: _save_settings_handler(self)
#        └── visa/
#            ├── ref_visa_commands.py (Lines: 411)
#                    |   -> Function: get_default_visa_commands()
#            ├── tab_instrument_child_visa_interpreter.py (Lines: 417)
#                    |   -> Import: datetime
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: ref.ref_file_paths
#                    |   -> Import: src.program_style
#                    |   -> Import: threading
#                    |   -> Import: time
#                    |   -> Import: tkinter
#                    |   -> Import: utils_visa_interpreter_commands
#                    |   -> Import: utils_visa_interpreter_files
#                    |   -> Class: VisaInterpreterTab
#                    |   -> Function: __init__(self, parent, app_instance, console_print_func)
#                    |   -> Function: _add_new_row(self)
#                    |   -> Function: _delete_selected_row(self)
#                    |   -> Function: _edit_cell(self, item, col_index)
#                    |   -> Function: _handle_connection_status_change_event(self, event)
#                    |   -> Function: _on_double_click(self, event)
#                    |   -> Function: _on_treeview_focus(self, event)
#                    |   -> Function: _on_treeview_select(self, event)
#                    |   -> Function: _refresh_data(self)
#                    |   -> Function: _save_data_to_csv(self)
#                    |   -> Function: _set_ui_initial_state(self)
#                    |   -> Function: _sort_treeview(self, tv, col)
#                    |   -> Function: bind_events(self)
#                    |   -> Function: create_widgets(self)
#                    |   -> Function: load_data_to_treeview(self)
#                    |   -> Function: numeric_sort_key(x)
#                    |   -> Function: on_entry_change(e)
#                    |   -> Function: on_focus_out(e)
#                    |   -> Function: setup_layout(self)
#            ├── utils_visa_interpreter_commands.py (Lines: 122)
#                    |   -> Import: datetime
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: tkinter
#                    |   -> Import: yak.utils_yak_visa
#                    |   -> Class: VisaCommandExecutor
#                    |   -> Function: __init__(self, app_instance, console_print_func)
#                    |   -> Function: _get_instrument_status(self)
#                    |   -> Function: on_do_command(self, command)
#                    |   -> Function: on_execute_command(self, command)
#                    |   -> Function: on_query_command(self, command)
#                    |   -> Function: on_set_command(self, command)
#            └── utils_visa_interpreter_files.py (Lines: 182)
#                    |   -> Import: csv
#                    |   -> Import: datetime
#                    |   -> Import: display.console_logic
#                    |   -> Import: display.debug_logic
#                    |   -> Import: inspect
#                    |   -> Import: os
#                    |   -> Import: ref.ref_file_paths
#                    |   -> Import: ref_visa_commands
#                    |   -> Function: create_default_data_file(data_file)
#                    |   -> Function: initialize_data_file_and_load()
#                    |   -> Function: load_visa_commands_data(data_file)
#                    |   -> Function: save_visa_commands_data(data_file, data)
#    └── Marker_files/
#        ├── tab_markers_child_import_and_edit.py (Lines: 847)
#                |   -> Import: csv
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: files.utils_marker_report_converter
#                |   -> Import: inspect
#                |   -> Import: json
#                |   -> Import: os
#                |   -> Import: re
#                |   -> Import: src.gui_elements
#                |   -> Import: sys
#                |   -> Import: threading
#                |   -> Import: tkinter
#                |   -> Import: xml.etree.ElementTree
#                |   -> Class: ReportConverterTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _disable_buttons(self)
#                |   -> Function: _enable_buttons(self)
#                |   -> Function: _increment_string_with_trailing_digits(self, text)
#                |   -> Function: _initiate_conversion(self, file_type)
#                |   -> Function: _load_markers_file(self)
#                |   -> Function: _navigate_cells(self, current_item, current_col_index, direction)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _on_tree_double_click(self, event)
#                |   -> Function: _on_tree_header_click(self, event)
#                |   -> Function: _perform_conversion(self, file_path, file_type)
#                |   -> Function: _populate_marker_tree(self)
#                |   -> Function: _save_markers_file_internally(self)
#                |   -> Function: _save_open_air_csv(self)
#                |   -> Function: _sort_treeview(self, column_name, ascending)
#                |   -> Function: _start_editing_cell(self, item, col_index, initial_value)
#                |   -> Function: _update_markers_display_tab_data(self)
#                |   -> Function: get_sort_key(item)
#                |   -> Function: on_edit_complete_and_navigate(event, navigate_direction)
#        ├── utils_file_markers_handling.py (Lines: 141)
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Function: _group_by_zone_and_group(data)
#                |   -> Function: load_and_process_markers(app_instance, console_print_func)
#                |   -> Function: load_markers_data(app_instance, console_print_func)
#        └── utils_marker_report_converter.py (Lines: 462)
#                |   -> Import: bs4
#                |   -> Import: csv
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pdfplumber
#                |   -> Import: re
#                |   -> Import: subprocess
#                |   -> Import: sys
#                |   -> Import: xml.etree.ElementTree
#                |   -> Function: convert_html_report_to_csv(html_content, console_print_func)
#                |   -> Function: convert_pdf_report_to_csv(pdf_file_path, console_print_func)
#                |   -> Function: generate_csv_from_shw(xml_file_path, console_print_func)
#    └── orchestrator/
#        ├── __init__.py (Lines: 60)
#        ├── display_child_orchestrator_tasks.py (Lines: 122)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Class: OrchestratorTasksTab
#                |   -> Function: __init__(self, parent, app_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: log_event(self, source, event)
#                |   -> Function: update_status_display(self, is_running, is_paused)
#        ├── orchestrator_gui.py (Lines: 94)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tkinter
#                |   -> Class: OrchestratorGUI
#                |   -> Function: __init__(self, parent, app_instance, orchestrator_logic)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: update_button_states(self)
#        └── orchestrator_logic.py (Lines: 98)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Class: OrchestratorLogic
#                |   -> Function: __init__(self, app_instance, gui)
#                |   -> Function: get_status(self)
#                |   -> Function: log_check_in(self, source_file)
#                |   -> Function: log_task_event(self, source_file, event)
#                |   -> Function: start_orchestrator(self)
#                |   -> Function: stop_orchestrator(self)
#                |   -> Function: toggle_pause(self)
#    └── Plotting/
#        ├── TAB_PLOTTING_PARENT.py (Lines: 45)
#                |   -> Import: inspect
#                |   -> Import: tab_plotting_child_3D
#                |   -> Import: tab_plotting_child_Single
#                |   -> Import: tab_plotting_child_average
#                |   -> Import: tkinter
#                |   -> Class: TAB_PLOTTING_PARENT
#                |   -> Function: __init__(self, parent, app_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_child_tab_selected(self, event)
#                |   -> Function: _on_parent_tab_selected(self, event)
#        ├── __init__.py (Lines: 24)
#        ├── tab_plotting_child_3D.py (Lines: 540)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: glob
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: platform
#                |   -> Import: re
#                |   -> Import: tkinter
#                |   -> Import: utils_plotting_scans_over_time
#                |   -> Import: webbrowser
#                |   -> Class: Plotting3DTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _clear_dynamic_3d_buttons(self)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _find_and_group_csv_files_3d(self, folder_path)
#                |   -> Function: _generate_plot_scans_over_time(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_folder_for_3d_plotting(self)
#                |   -> Function: _select_group_for_3d_plotting(self, prefix)
#        ├── tab_plotting_child_Single.py (Lines: 670)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: tkinter
#                |   -> Import: utils_plotting
#                |   -> Import: webbrowser
#                |   -> Class: PlottingTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _local_calculate_average(df)
#                |   -> Function: _local_calculate_median(df)
#                |   -> Function: _local_calculate_psd(df, rbw_values_list)
#                |   -> Function: _local_calculate_range(df)
#                |   -> Function: _local_calculate_std_dev(df)
#                |   -> Function: _local_calculate_variance(df)
#                |   -> Function: _on_create_html_checkbox_changed(self)
#                |   -> Function: _on_scan_marker_checkbox_changed(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_last_plot(self)
#                |   -> Function: _plot_current_cycle_average(self)
#                |   -> Function: _plot_single_scan(self)
#        ├── tab_plotting_child_average.py (Lines: 1067)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: glob
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: platform
#                |   -> Import: process_math.averaging_utils
#                |   -> Import: re
#                |   -> Import: subprocess
#                |   -> Import: tkinter
#                |   -> Import: utils_plotting
#                |   -> Import: webbrowser
#                |   -> Class: AveragingTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _clear_dynamic_buttons(self)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _find_and_group_csv_files(self, folder_path)
#                |   -> Function: _generate_csv_selected_series(self)
#                |   -> Function: _generate_multi_average_plot(self, include_scans)
#                |   -> Function: _on_avg_type_checkbox_changed(self)
#                |   -> Function: _on_multi_file_marker_checkbox_changed(self)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_applied_math_folder(self)
#                |   -> Function: _open_folder_for_averaging(self)
#                |   -> Function: _select_group_for_plotting(self, prefix)
#        ├── utils_plotting.py (Lines: 675)
#                |   -> Import: csv
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: plotly.express
#                |   -> Import: plotly.graph_objects
#                |   -> Import: re
#                |   -> Import: webbrowser
#                |   -> Function: _add_band_markers(fig, markers_dict, line_color, line_dash, band_name_suffix, MHZ_TO_HZ, console_print_func)
#                |   -> Function: _add_intermodulation_markers(fig, intermod_csv_path, MHZ_TO_HZ, console_print_func)
#                |   -> Function: _add_markers_from_csv(fig, markers_csv_path, MHZ_TO_HZ, console_print_func)
#                |   -> Function: _create_spectrum_plot(data_traces, plot_title, include_tv_markers, include_gov_markers, include_markers, include_intermod_markers, output_html_path, y_range_min_override, y_range_max_override, console_print_func, scan_data_folder, MHZ_TO_HZ, TV_BAND_MARKERS_MHZ, GOVERNMENT_BAND_MARKERS_MHZ, DEFAULT_MARKERS_FILE, DEFAULT_INTERMOD_FILE)
#                |   -> Function: _open_plot_in_browser(html_file_path, console_print_func)
#                |   -> Function: plot_multi_trace_data(df_aggregated, plot_title, include_tv_markers, include_gov_markers, include_markers, include_intermod_markers, historical_dfs_with_names, individual_scan_dfs_with_names, output_html_path, y_range_min_override, y_range_max_override, console_print_func, scan_data_folder, MHZ_TO_HZ, TV_BAND_MARKERS_MHZ, GOVERNMENT_BAND_MARKERS_MHZ, DEFAULT_MARKERS_FILE, DEFAULT_INTERMOD_FILE)
#                |   -> Function: plot_single_scan_data(df_scan, plot_title, include_tv_markers, include_gov_markers, include_markers, include_intermod_markers, output_html_path, console_print_func, scan_data_folder, MHZ_TO_HZ, TV_BAND_MARKERS_MHZ, GOVERNMENT_BAND_MARKERS_MHZ, DEFAULT_MARKERS_FILE, DEFAULT_INTERMOD_FILE)
#        └── utils_plotting_scans_over_time.py (Lines: 303)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: plotly.colors
#                |   -> Import: plotly.graph_objects
#                |   -> Import: re
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: webbrowser
#                |   -> Function: plot_Scans_over_time(grouped_csv_files, selected_group_prefix, output_folder, amplitude_threshold_dbm, console_print_func)
#    └── Presets/
#        ├── TAB_PRESETS_PARENT.py (Lines: 47)
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tab_presets_child_device
#                |   -> Import: tab_presets_child_local
#                |   -> Import: tab_presets_child_preset_editor
#                |   -> Import: tkinter
#                |   -> Class: TAB_PRESETS_PARENT
#                |   -> Function: __init__(self, parent, app_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_child_tab_selected(self, event)
#                |   -> Function: _on_parent_tab_selected(self, event)
#        ├── __init__.py (Lines: 24)
#        ├── tab_presets_child_device.py (Lines: 353)
#                |   -> Import: Instrument.connection.instrument_logic
#                |   -> Import: Presets.utils_preset_csv_process
#                |   -> Import: Presets.utils_preset_query_and_load
#                |   -> Import: Presets.utils_push_preset
#                |   -> Import: csv
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Class: DevicePresetsTab
#                |   -> Function: __init__(self, parent, app_instance, console_print_func, style_obj)
#                |   -> Function: __load_selected_preset_logic(self, selected_preset_name, is_device_preset, preset_data_dict)
#                |   -> Function: _handle_connection_status_change_event(self, event)
#                |   -> Function: _load_selected_device_preset(self)
#                |   -> Function: _on_connection_status_changed(self, is_connected, instrument_model)
#                |   -> Function: _on_device_preset_select(self, event)
#                |   -> Function: _populate_device_preset_listboxes(self, presets)
#                |   -> Function: _query_and_populate_device_presets(self)
#                |   -> Function: bind_events(self)
#                |   -> Function: create_widgets(self)
#                |   -> Function: save_current_settings_as_user_preset(self)
#                |   -> Function: setup_layout(self)
#        ├── tab_presets_child_local.py (Lines: 569)
#                |   -> Import: Presets.utils_preset_csv_process
#                |   -> Import: Presets.utils_preset_query_and_load
#                |   -> Import: Presets.utils_push_preset
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: ref.ref_file_paths
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Class: LocalPresetsTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func, style_obj)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_mousewheel(self, event)
#                |   -> Function: _on_preset_button_click(self, preset_data, clicked_button)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _update_gui_from_preset_data(self, preset_data)
#                |   -> Function: get_and_set_app_var(preset_key, app_attr_name, conversion_func, scale_factor)
#                |   -> Function: get_and_set_bool_app_var(preset_key, app_attr_name)
#                |   -> Function: populate_local_presets_list(self)
#                |   -> Function: set_display_var(tk_var, key, format_str, conversion_func, default_val)
#        ├── tab_presets_child_preset_editor.py (Lines: 356)
#                |   -> Import: Instrument.connection.instrument_logic
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Import: utils_presets_editor
#                |   -> Class: PresetEditorTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func, style_obj)
#                |   -> Function: _add_current_settings(self)
#                |   -> Function: _add_new_empty_row(self)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _delete_selected_preset(self)
#                |   -> Function: _end_edit(self, event)
#                |   -> Function: _export_presets(self)
#                |   -> Function: _import_presets(self)
#                |   -> Function: _move_preset_down(self)
#                |   -> Function: _move_preset_up(self)
#                |   -> Function: _on_double_click(self, event)
#                |   -> Function: _on_edit_escape(self, event)
#                |   -> Function: _on_edit_return(self, event)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _on_tree_select(self, event)
#                |   -> Function: _on_window_focus_in(self, event)
#                |   -> Function: _save_presets_to_csv(self)
#                |   -> Function: _start_edit(self, item_id, col_index)
#                |   -> Function: populate_presets_table(self)
#        ├── utils_preset_csv_process.py (Lines: 269)
#                |   -> Import: csv
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Function: get_presets_csv_path(config_file_path, console_print_func)
#                |   -> Function: load_user_presets_from_csv(config_file_path, console_print_func)
#                |   -> Function: overwrite_user_presets_csv(config_file_path, presets_data, console_print_func, fieldnames)
#        ├── utils_preset_query_and_load.py (Lines: 271)
#                |   -> Import: Instrument.connection.instrument_logic
#                |   -> Import: Presets.utils_push_preset
#                |   -> Import: csv
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: pyvisa
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: time
#                |   -> Import: yak.Yakety_Yak
#                |   -> Function: load_selected_preset_logic(app_instance, selected_preset_name, console_print_func, is_device_preset, preset_data_dict)
#                |   -> Function: query_current_instrument_settings_for_preset(inst, console_print_func)
#                |   -> Function: query_device_presets_logic(app_instance, console_print_func)
#        ├── utils_presets_editor.py (Lines: 267)
#                |   -> Import: Instrument.connection.instrument_logic
#                |   -> Import: csv
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: ref.ref_file_paths
#                |   -> Import: shutil
#                |   -> Import: utils_preset_csv_process
#                |   -> Class: PresetEditorLogic
#                |   -> Function: __init__(self, app_instance, console_print_func, columns)
#                |   -> Function: add_current_settings(self)
#                |   -> Function: add_new_empty_row(self)
#                |   -> Function: delete_presets(self, selected_filenames)
#                |   -> Function: export_presets(self, file_path)
#                |   -> Function: import_presets(self, file_path)
#                |   -> Function: load_presets(self)
#                |   -> Function: move_preset_down(self, filename)
#                |   -> Function: move_preset_up(self, filename)
#                |   -> Function: save_presets(self)
#                |   -> Function: update_preset_value(self, filename, column_name, new_value)
#        └── utils_push_preset.py (Lines: 210)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: re
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: yak.Yakety_Yak
#                |   -> Function: push_preset_logic(app_instance, console_print_func, preset_data)
#    └── Scanning/
#        ├── TAB_SCANNING_PARENT.py (Lines: 47)
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: tab_scanning_child_bands
#                |   -> Import: tab_scanning_child_scan_configuration
#                |   -> Import: tab_scanning_child_scan_meta_data
#                |   -> Import: tkinter
#                |   -> Class: TAB_SCANNING_PARENT
#                |   -> Function: __init__(self, parent, app_instance)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _on_child_tab_selected(self, event)
#                |   -> Function: _on_parent_tab_selected(self, event)
#        ├── __init__.py (Lines: 24)
#        ├── tab_scanning_child_bands.py (Lines: 450)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: matplotlib.backends.backend_tkagg
#                |   -> Import: matplotlib.figure
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: tkinter
#                |   -> Class: BandsTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _deselect_all_bands(self)
#                |   -> Function: _on_band_button_toggle(self, band_item)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _populate_band_buttons(self)
#                |   -> Function: _select_all_bands(self)
#                |   -> Function: _update_all_band_button_styles(self)
#                |   -> Function: _update_band_chart(self)
#                |   -> Function: _update_band_table(self)
#                |   -> Function: _update_button_style(self, button, level)
#        ├── tab_scanning_child_scan_configuration.py (Lines: 319)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: ref.ref_scanner_setting_lists
#                |   -> Import: ref.ref_scanning_setting
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: subprocess
#                |   -> Import: sys
#                |   -> Import: tkinter
#                |   -> Class: ScanTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func)
#                |   -> Function: _browse_output_folder(self)
#                |   -> Function: _create_setting_row(self, parent, row, key, label_text, app_var, data_list, unit)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _load_settings_into_ui(self)
#                |   -> Function: _on_boolean_combobox_select(self, event, app_var)
#                |   -> Function: _on_combobox_select(self, event, app_var, data_list, description_var, unit)
#                |   -> Function: _on_tab_selected(self, event)
#                |   -> Function: _open_output_folder(self)
#                |   -> Function: _set_combobox_display_from_value(self, key)
#        ├── tab_scanning_child_scan_meta_data.py (Lines: 556)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: process_math.google_maps_lookup
#                |   -> Import: ref.ref_antenna_amplifier_type
#                |   -> Import: ref.ref_antenna_type
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: subprocess
#                |   -> Import: tkinter
#                |   -> Class: ScanMetaDataTab
#                |   -> Function: __init__(self, master, app_instance, console_print_func, style_obj)
#                |   -> Function: _create_widgets(self)
#                |   -> Function: _lookup_postal_code(self)
#                |   -> Function: _on_amplifier_type_selected(self, event)
#                |   -> Function: _on_antenna_type_selected(self, event)
#                |   -> Function: _on_notes_change(self, event)
#                |   -> Function: _on_tab_selected(self, event)
#        └── utils_scan_instrument.py (Lines: 481)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: process_math.scan_stitch
#                |   -> Import: pyvisa
#                |   -> Import: re
#                |   -> Import: ref.ref_frequency_bands
#                |   -> Import: src.connection_status_logic
#                |   -> Import: threading
#                |   -> Import: time
#                |   -> Import: utils.utils_csv_writer
#                |   -> Function: _scan_thread_target(app_instance, selected_bands, stop_event, pause_event, console_print_func, update_progress_func)
#                |   -> Function: configure_instrument_for_scan(inst, center_freq_hz, span_hz, rbw_hz, ref_level_dbm, freq_shift_hz, high_sensitivity_on, preamp_on, app_instance_ref, app_console_update_func)
#                |   -> Function: initiate_scan_thread(app_instance, console_print_func, stop_event, pause_event, update_progress_func)
#                |   -> Function: perform_segment_sweep(inst, segment_start_freq_hz, segment_stop_freq_hz, maxhold_enabled, max_hold_time, app_instance_ref, pause_event, stop_event, segment_counter, total_segments_in_band, band_name, app_console_update_func, current_segment_start_freq_hz)
#                |   -> Function: perform_single_sweep(inst, app_instance_ref, app_console_update_func)
#                |   -> Function: query_safe(inst, command, app_instance_ref, app_console_update_func)
#                |   -> Function: scan_bands(app_instance_ref, inst, selected_bands, rbw_hz, ref_level_dbm, freq_shift_hz, maxhold_enabled, high_sensitivity, preamp_on, rbw_step_size_hz, max_hold_time_seconds, scan_name, output_folder, stop_event, pause_event, log_visa_commands_enabled, general_debug_enabled, app_console_update_func, initialize_instrument_func)
#                |   -> Function: write_safe(inst, command, app_instance_ref, app_console_update_func)
#    └── zones_groups_devices/
#        ├── tab_markers_child_zone_groups_devices.py (Lines: 211)
#                |   -> Import: datetime
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: functools
#                |   -> Import: inspect
#                |   -> Import: os
#                |   -> Import: src.program_style
#                |   -> Import: tkinter
#                |   -> Import: utils_button_volume_level
#                |   -> Import: utils_display_showtime_all
#                |   -> Import: utils_display_showtime_devices
#                |   -> Import: utils_display_showtime_groups
#                |   -> Import: utils_display_showtime_zones
#                |   -> Import: utils_files_markers_zone_groups_devices
#                |   -> Class: ZoneGroupsDevicesFrame
#                |   -> Function: __init__(self, parent_frame, showtime_tab_instance)
#                |   -> Function: _create_device_frame(self, parent)
#                |   -> Function: _create_layout(self)
#                |   -> Function: _get_all_devices_in_zone(self, structured_data, zone_name)
#                |   -> Function: _get_devices_to_display(self)
#                |   -> Function: _get_min_max_freq_and_update_title(self, frame_widget, devices, title_prefix)
#                |   -> Function: _make_device_buttons(self)
#                |   -> Function: _make_group_buttons(self)
#                |   -> Function: _make_zone_buttons(self)
#                |   -> Function: load_and_display_data(self)
#        ├── utils_button_volume_level.py (Lines: 73)
#                |   -> Import: datetime
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: math
#                |   -> Import: os
#                |   -> Function: create_signal_level_indicator(value, min_val, max_val, width)
#        ├── utils_display_showtime_all.py (Lines: 146)
#                |   -> Import: Markers.showtime.controls.utils_showtime_zone_zoom
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: tkinter
#                |   -> Import: utils_display_showtime_shared
#                |   -> Function: no_zone_grou_device_selected(zgd_frame_instance)
#                |   -> Function: on_all_markers_selected(zgd_frame_instance)
#        ├── utils_display_showtime_devices.py (Lines: 154)
#                |   -> Import: Markers.showtime.controls.utils_showtime_zone_zoom
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: math
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: utils_display_showtime_groups
#                |   -> Import: utils_display_showtime_shared
#                |   -> Import: yak.utils_yakbeg_handler
#                |   -> Function: on_device_deselected(zgd_frame_instance)
#                |   -> Function: on_device_selected(zgd_frame_instance, device_info)
#        ├── utils_display_showtime_groups.py (Lines: 202)
#                |   -> Import: Markers.showtime.controls.utils_showtime_zone_zoom
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: math
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: tkinter
#                |   -> Import: utils_display_showtime_devices
#                |   -> Import: utils_display_showtime_shared
#                |   -> Function: no_zone_grou_device_selected(zgd_frame_instance)
#                |   -> Function: on_group_deselected(zgd_frame_instance)
#                |   -> Function: on_group_selected(zgd_frame_instance, group_name)
#        ├── utils_display_showtime_shared.py (Lines: 278)
#                |   -> Import: Markers.showtime.controls.utils_showtime_zone_zoom
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: math
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: settings_and_config.config_manager_save
#                |   -> Import: threading
#                |   -> Import: tkinter
#                |   -> Function: _save_showtime_state_to_config(showtime_tab)
#                |   -> Function: _update_zone_zoom_tab(zgd_frame_instance)
#                |   -> Function: get_current_view_details(zgd_frame_instance)
#        ├── utils_display_showtime_zones.py (Lines: 118)
#                |   -> Import: Markers.showtime.controls.utils_showtime_zone_zoom
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: math
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: tkinter
#                |   -> Import: utils_display_showtime_all
#                |   -> Import: utils_display_showtime_shared
#                |   -> Function: on_zone_selected(zgd_frame_instance, zone_name)
#        └── utils_files_markers_zone_groups_devices.py (Lines: 100)
#                |   -> Import: display.console_logic
#                |   -> Import: display.debug_logic
#                |   -> Import: inspect
#                |   -> Import: numpy
#                |   -> Import: os
#                |   -> Import: pandas
#                |   -> Import: ref.ref_file_paths
#                |   -> Function: load_and_structure_markers_data()
